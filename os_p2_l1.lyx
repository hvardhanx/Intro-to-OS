#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman palatino
\font_sans helvet
\font_typewriter courier
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize custom
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Process Management
\end_layout

\begin_layout Author
Harsh Vardhan
\end_layout

\begin_layout Standard
A process can be thought as a program in execution.
 
\end_layout

\begin_layout Standard
As a process executes, it changes state.
 The state of a process is defined in part by the current activity of that
 process.
 A process may be in one of the following states:
\end_layout

\begin_layout Itemize
New: The process is being created.
\end_layout

\begin_layout Itemize
Running: The instructions are being executed.
\end_layout

\begin_layout Itemize
Waiting: The process is waiting for some event to occur ( such as an I/O
 completion or reception of a signal ).
\end_layout

\begin_layout Itemize
Ready: The process is wating to be assigned to a processor.
\end_layout

\begin_layout Itemize
Terminated: The process has finished execution.
\end_layout

\begin_layout Standard
Each process is represented in the operating system by a 
\emph on
process control block 
\emph default
(PCB) - also called 
\emph on
task control block
\emph default
.
 It contains many pieces of information, like :
\end_layout

\begin_layout Itemize
Process State
\end_layout

\begin_layout Itemize
Program Counter 
\end_layout

\begin_layout Itemize
CPU registers 
\end_layout

\begin_layout Itemize
CPU-scheduling information
\end_layout

\begin_layout Itemize
Memory Management information
\end_layout

\begin_layout Itemize
Account Information
\end_layout

\begin_layout Itemize
I/O status information
\end_layout

\begin_layout Standard

\series bold
Context Switch
\end_layout

\begin_layout Standard
When an interrupt occurs the operating system needs to save the current
 context of the process running on the CPU, so that it can restore that
 context when the processing is done, essentially suspending the process
 and then resuming it.The context is represented in the PCB of the process.
 It includes the value of the CPU registers, the process state and memory
 management information.
 Generally, we perform a state save of current state of the CPU be it in
 kernel or user mode, and then state restore to resume operations.
\end_layout

\begin_layout Standard
Switching the CPU to another process requires performing a state save of
 the current process and a state restore of a different process.
 This task is known as a context switch.
 Context switch time is pure overhead because the system does no useful
 work while switching.The Processsor cache switches between processes and
 cache misses might occur while switching and reading data from the memory.
 When the cache is hot most process data is in the cache so the process
 performance will be at its best.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\series bold
Process Creation
\end_layout

\begin_layout Standard
A new process is created by the 
\emph on
fork()
\emph default
 system call.
 The new process consists of a copy of address space of the original process.This
 mechanism allows parent process to communicate easily with its child process.
 Both processes continue execution at the instruction after the 
\emph on
fork(),
\emph default
 with one difference: the return code for the fork() of new(child) process
 is zero, whereas (nonzero) process identifier of the child is returned
 to the parent.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

After a 
\emph on
fork() 
\emph default
system call, one of the two system processes typically uses 
\emph on
exec()
\emph default
 system call to replace the process's memory space with a new program.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\series bold
Interprocess Communication
\end_layout

\begin_layout Standard
Processes executing concurrently in the operating system may either be independe
nt processes or cooperating processes.
 A process is independent if it cannot affect or be affected by any other
 processes that is being executed in the system.
 Any process that does not share any data with any other process is independent.
 A process is cooperating if it can affect or be affected by the other processes
 executing in the system.
 
\end_layout

\begin_layout Standard
Reasons for providing an environment that allows cooperation:
\end_layout

\begin_layout Itemize
Information Sharing
\end_layout

\begin_layout Itemize
Computation Speedup
\end_layout

\begin_layout Itemize
Modularity
\end_layout

\begin_layout Itemize
Convenience
\end_layout

\begin_layout Standard
Cooperating processes require an interprocess communication(IPC) mechanism
 that will allow them to exchange data and information.
 There are two fundamental models of interprocess communication: 
\emph on
shared memory 
\emph default
and 
\emph on
messaging passing.
 
\emph default
In shared memory model, a region of memory that is shared by cooperating
 processes is established.
 Processes can then exchange information by reading and writing data to
 the shared region.
 In the message-passing model, communication takes place by means of messages
 exchanged between the cooperating processes.Message passing model is easier
 to implement in a distributed system than shared memory.
 Shared memory suffers from cache coherency issues, which arise because
 shared data migrates among the several caches.
\end_layout

\end_body
\end_document
